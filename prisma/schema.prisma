generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String
  role            UserRole  @default(STUDENT)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  student         Student?
  notifications   Notification[]
}

model Student {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  nationalId      String    @unique
  dateOfBirth     String
  mobileNumber    String
  city            String
  term            String
  profileImageUrl String?
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities      Activity[]
  exams           Exam[]    @relation("StudentExams")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Activity {
  id              String    @id @default(uuid())
  title           String
  count           Int
  date            String
  completionTime  String
  score           Int
  term            String
  studentId       String?
  student         Student?  @relation(fields: [studentId], references: [id], onDelete: SetNull)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Exam {
  id           String    @id @default(uuid())
  title        String
  digitCount   Int
  rowCount     Int
  itemsPerRow  Int
  timeLimit    Int      // in seconds
  operators    String   // e.g. "+,-,*"
  term         String   // student term
  students     Student[] @relation("StudentExams")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("exams")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

enum UserRole {
  ADMIN
  STUDENT
}