generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
  
//}
 datasource db {
 provider = "postgresql"
  url      = "postgresql://postgres:JYJvtRWaM7eJGWWV@services.gen1.chabokan.net:50297/james?connection_timeout=30"
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String?   @unique
  emailVerified   DateTime? @db.Timestamp
  image           String?
  password        String
  role            UserRole  @default(STUDENT)
  createdAt       DateTime  @default(now()) @db.Timestamp
  updatedAt       DateTime  @updatedAt @db.Timestamp
  student         Student?
  notifications   Notification[]
}

model Student {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  nationalId      String    @unique
  dateOfBirth     String
  mobileNumber    String
  city            String
  term            String
  profileImageUrl String?
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities      Activity[]
  exams           Exam[]    @relation("StudentExams")
  examResults     ExamResult[]
  createdAt       DateTime  @default(now()) @db.Timestamp
  updatedAt       DateTime  @updatedAt @db.Timestamp
}

model Activity {
  id              String    @id @default(uuid())
  title           String
  count           Int
  date            String
  completionTime  String
  score           Int
  term            String
  studentId       String?
  student         Student?  @relation(fields: [studentId], references: [id], onDelete: SetNull)
  createdAt       DateTime  @default(now()) @db.Timestamp
  updatedAt       DateTime  @updatedAt @db.Timestamp
}

model Exam {
  id           String    @id @default(uuid())
  title        String
  digitCount   Int
  rowCount     Int
  itemsPerRow  Int
  timeLimit    Int      // in seconds
  operators    String   // e.g. "+,-,*"
  term         String   // student term
  isActive     Boolean  @default(true)
  showResult   Boolean  @default(false)
  addSubQuestions Json?
  mulDivQuestions Json?
  students     Student[] @relation("StudentExams")
  results      ExamResult[]
  createdAt    DateTime  @default(now()) @db.Timestamp
  updatedAt    DateTime  @updatedAt @db.Timestamp

  @@map("exams")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model ExamResult {
  id          String    @id @default(uuid())
  examId      String
  studentId   String
  score       Int
  addSubAnswers Json?
  mulDivAnswers Json?
  startTime   DateTime  @default(now()) @db.Timestamp
  endTime     DateTime? @db.Timestamp
  timeSpent   Int?
  exam        Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @db.Timestamp
  updatedAt   DateTime  @updatedAt @db.Timestamp

  @@unique([examId, studentId])
  @@map("exam_results")
}

enum UserRole {
  ADMIN
  STUDENT
}